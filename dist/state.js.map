{"version":3,"sources":["../src/state.js"],"names":["actionTypes","STATE_UPDATE","errorTypes","INCOMPLETE_IMPLEMENTATION","updateState","targetPath","targetStore","value","length","CustomError","type","exception","message","targetPathParent","slice","targetPathChild","targetStoreParent","stateReducer","state","action","stash","newState","stageReducer","accum","stage","context","next","operation","payload","target","stages","reduce","reduxReducer"],"mappings":";;;;;;;AAAA;;AACA;;;;;;;;;;AAEO,IAAMA,WAAW,GAAG;AACzBC,EAAAA,YAAY,EAAE;AADW,CAApB;;AAIP,IAAMC,UAAU,GAAG;AACjBC,EAAAA,yBAAyB,EAAE;AADV,CAAnB;;AAIA,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAACC,UAAD,EAAaC,WAAb,EAA0BC,KAA1B,EAAoC;AACtD;AACA,MAAIF,UAAU,CAACG,MAAX,GAAoB,CAAxB,EAA2B;AACzB,UAAM,IAAIC,uBAAJ,CAAgB;AACpBC,MAAAA,IAAI,EAAER,UAAU,CAACC,yBADG;AAEpBQ,MAAAA,SAAS,EAAE;AACTC,QAAAA,OAAO,oEAA6DP,UAA7D;AADE;AAFS,KAAhB,CAAN;AAMD,GATqD,CAWtD;;;AACA,MAAMQ,gBAAgB,GAAGR,UAAU,CAACS,KAAX,CAAiB,CAAjB,EAAoB,CAAC,CAArB,CAAzB;AACA,MAAMC,eAAe,GAAGV,UAAU,CAACS,KAAX,CAAiB,CAAC,CAAlB,EAAqB,CAArB,CAAxB;AACA,MAAME,iBAAiB,GAAIX,UAAU,CAACG,MAAX,KAAsB,CAAvB,GAA4BF,WAA5B,GAA0C,yBAAUA,WAAV,EAAuBO,gBAAvB,CAApE;AACAG,EAAAA,iBAAiB,CAACD,eAAD,CAAjB,GAAqCR,KAArC;AACD,CAhBD;;AAkBO,IAAMU,YAAY,GAAG,SAAfA,YAAe,CAACC,KAAD,EAAQC,MAAR,EAAmB;AAC7C,MAAMC,KAAK,GAAG;AAAC,cAAU;AAAX,GAAd,CAD6C,CAE7C;;AACA,MAAMC,QAAQ,qBAAOH,KAAP,CAAd;;AAEA,MAAMI,YAAY,GAAG,SAAfA,YAAe,CAACC,KAAD,EAAQC,KAAR,EAAkB;AACrC,QAAMC,OAAO,GAAID,KAAK,CAACC,OAAN,IAAiB,yBAAUD,KAAK,CAACC,OAAN,CAAc,CAAd,MAAqB,QAArB,GAAgCL,KAAhC,GAAwCF,KAAlD,EAAyDM,KAAK,CAACC,OAA/D,CAAlB,IAA8FF,KAA9G;AACA,QAAMG,IAAI,GAAGF,KAAK,CAACG,SAAN,CAAgBF,OAAhB,EAAyBD,KAAK,CAACI,OAA/B,CAAb;AACAJ,IAAAA,KAAK,CAACK,MAAN,IAAgBzB,WAAW,CAACoB,KAAK,CAACK,MAAP,EAAeR,QAAf,EAAyBK,IAAzB,CAA3B;AACAF,IAAAA,KAAK,CAACJ,KAAN,IAAehB,WAAW,CAACoB,KAAK,CAACJ,KAAP,EAAcA,KAAd,EAAqBM,IAArB,CAA1B;AACA,WAAOA,IAAP;AACD,GAND;AAQA;;;AAAyBP,EAAAA,MAAM,CAACW,MAAP,CAAcC,MAAd,CAAqBT,YAArB,EAAmCD,QAAnC;AACzB,SAAOA,QAAP;AACD,CAfM;;;;AAiBA,IAAMW,YAAY,GAAG,SAAfA,YAAe,CAACd,KAAD,EAAQC,MAAR,EAAmB;AAC7C,MAAI,CAACD,KAAD,IAAWC,MAAM,IAAIA,MAAM,CAACT,IAAP,KAAgBV,WAAW,CAACC,YAArD,EAAoE;AAClE,WAAOiB,KAAP;AACD;;AAED,2BACGA,KADH,MAEID,YAAY,CAACC,KAAD,EAAQC,MAAR,CAFhB;AAID,CATM","sourcesContent":["import { drillDown } from 'deepdown'\nimport CustomError from './custom-error'\n\nexport const actionTypes = {\n  STATE_UPDATE: 'STATE_UPDATE',\n}\n\nconst errorTypes = {\n  INCOMPLETE_IMPLEMENTATION: 'INCOMPLETE_IMPLEMENTATION',\n}\n\nconst updateState = (targetPath, targetStore, value) => {\n  // could be < 1, assuming drillDown can handle empty array and return store\n  if (targetPath.length < 1) {\n    throw new CustomError({\n      type: errorTypes.INCOMPLETE_IMPLEMENTATION,\n      exception: {\n        message: `cannot currently write targets with length less than 2 [${targetPath}]`\n      }\n    })\n  }\n\n  // assumes `targetPath` is an array with length >= 2\n  const targetPathParent = targetPath.slice(0, -1);\n  const targetPathChild = targetPath.slice(-1)[0];\n  const targetStoreParent = (targetPath.length === 1) ? targetStore : drillDown(targetStore, targetPathParent);\n  targetStoreParent[targetPathChild] = value;\n}\n\nexport const stateReducer = (state, action) => {\n  const stash = {'$stash': {}};\n  // TODO: maybe passing `state` directly will result in less re-renders?\n  const newState = {...state};\n\n  const stageReducer = (accum, stage) => {\n    const context = (stage.context && drillDown(stage.context[0] === '$stash' ? stash : state, stage.context)) || accum;\n    const next = stage.operation(context, stage.payload);\n    stage.target && updateState(stage.target, newState, next);\n    stage.stash && updateState(stage.stash, stash, next)\n    return next;\n  };\n\n  /*const finalContext = */action.stages.reduce(stageReducer, newState);\n  return newState;\n}\n\nexport const reduxReducer = (state, action) => {\n  if (!state || (action && action.type !== actionTypes.STATE_UPDATE)) {\n    return state;\n  }\n\n  return {\n  ...state,\n  ...(stateReducer(state, action))\n  }\n}\n"],"file":"state.js"}